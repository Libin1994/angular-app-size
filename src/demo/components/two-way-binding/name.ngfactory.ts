/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './name';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/constants';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../../node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory';
import * as import9 from '../../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';
import * as import10 from '../../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import11 from '@angular/core/src/change_detection/change_detection_util';
import * as import12 from '@angular/core/src/linker/element_ref';
import * as import13 from '@angular/forms/src/directives/default_value_accessor';
import * as import14 from '@angular/forms/src/directives/control_value_accessor';
import * as import15 from '@angular/forms/src/directives/ng_model';
import * as import16 from '@angular/forms/src/directives/ng_control';
import * as import17 from '@angular/forms/src/directives/ng_control_status';
export class Wrapper_Name {
  /*private*/ _eventHandler:Function;
  context:import0.Name;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import0.Name();
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_Name_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_Name_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.Name>;
  _Name_0_3:Wrapper_Name;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Name_Host0,renderType_Name_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ng-component',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_Name0(this.viewUtils,this,0,this._el_0);
    this._Name_0_3 = new Wrapper_Name();
    this.compView_0.create(this._Name_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._Name_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.Name) && (0 === requestNodeIndex))) { return this._Name_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Name_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const NameNgFactory:import7.ComponentFactory<import0.Name> = new import7.ComponentFactory<import0.Name>('ng-component',View_Name_Host0,import0.Name);
const styles_Name:any[] = ([] as any[]);
var renderType_Name:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_Name,{});
export class View_Name0 extends import1.AppView<import0.Name> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  _el_3:any;
  _DefaultValueAccessor_3_3:import8.Wrapper_DefaultValueAccessor;
  _NG_VALUE_ACCESSOR_3_4:any[];
  _NgModel_3_5:import9.Wrapper_NgModel;
  _NgControl_3_6:any;
  _NgControlStatus_3_7:import10.Wrapper_NgControlStatus;
  _text_4:any;
  /*private*/ _expr_10:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_Name0,renderType_Name,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
    this._expr_10 = import11.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'h1',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'Two-Way Binding',(null as any));
    this._text_2 = this.renderer.createText(parentRenderNode,'\n             ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,parentRenderNode,'input',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._DefaultValueAccessor_3_3 = new import8.Wrapper_DefaultValueAccessor(this.renderer,new import12.ElementRef(this._el_3));
    this._NG_VALUE_ACCESSOR_3_4 = [this._DefaultValueAccessor_3_3.context];
    this._NgModel_3_5 = new import9.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_3_4);
    this._NgControl_3_6 = this._NgModel_3_5.context;
    this._NgControlStatus_3_7 = new import10.Wrapper_NgControlStatus(this._NgControl_3_6);
    this._text_4 = this.renderer.createText(parentRenderNode,'',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_3,new import3.InlineArray8(6,'ngModelChange',(null as any),'input',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_3));
    this._NgModel_3_5.subscribe(this,this.eventHandler(this.handleEvent_3),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._text_2,
      this._el_3,
      this._text_4
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.DefaultValueAccessor) && (3 === requestNodeIndex))) { return this._DefaultValueAccessor_3_3.context; }
    if (((token === import14.NG_VALUE_ACCESSOR) && (3 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_3_4; }
    if (((token === import15.NgModel) && (3 === requestNodeIndex))) { return this._NgModel_3_5.context; }
    if (((token === import16.NgControl) && (3 === requestNodeIndex))) { return this._NgControl_3_6; }
    if (((token === import17.NgControlStatus) && (3 === requestNodeIndex))) { return this._NgControlStatus_3_7.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._DefaultValueAccessor_3_3.ngDoCheck(this,this._el_3,throwOnChange);
    const currVal_3_1_0:any = this.context.firstName;
    this._NgModel_3_5.check_model(currVal_3_1_0,throwOnChange,false);
    this._NgModel_3_5.ngDoCheck(this,this._el_3,throwOnChange);
    this._NgControlStatus_3_7.ngDoCheck(this,this._el_3,throwOnChange);
    this._NgControlStatus_3_7.checkHost(this,this,this._el_3,throwOnChange);
    const currVal_10:any = import3.inlineInterpolate(1,' ',this.context.firstName,'');
    if (import3.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      this.renderer.setText(this._text_4,currVal_10);
      this._expr_10 = currVal_10;
    }
  }
  destroyInternal():void {
    this._NgModel_3_5.ngOnDestroy();
  }
  handleEvent_3(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._DefaultValueAccessor_3_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.firstName = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}